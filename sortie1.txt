    mot/id/entier:x
    =
[0;32mAdding x to table[0m
    mot/id/entier:0
operande-> MOT
        crÃ©er quadOP:0  str:0
concatenation-> operande 
    ;
instruction-> ID = concatenation
[91mUpdating type of x to 1[0m
        crÃ©er quadOP:1  str:x
liste_instruction->instruction
        crÃ©er quadOP:2  cst:0
    until
M->empty
    test
    $
    {
    mot/id/entier:x
    }
operande-> $ { ID }
        crÃ©er quadOP:3  str:x
    -eq
operateur2-> -eq
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:4  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:5  str:__TEMP__1
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    do
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    mot/id/entier:x
    =
    $
    (
    expr
    $
    {
    mot/id/entier:x
    }
operande_entier-> $ { id } 
        crÃ©er quadOP:6  str:x
produit_entier-> operande_entier 
    +
somme_entiere-> produit_entier 
    mot/id/entier:7
operande_entier-> ENTIER 
ToInt: 7
        crÃ©er quadOP:7  cst:7
produit_entier-> operande_entier 
    )
somme_entiere-> somme_entiere plus_ou_moin produit_entier 
        crÃ©er quadOP:8  str:__TEMP__2
operande-> $ ( EXPR somme_entiere )
concatenation-> operande 
    ;
instruction-> ID = concatenation
        crÃ©er quadOP:9  str:x
liste_instruction->instruction
        crÃ©er quadOP:10  cst:0
    echo
    $
    {
    mot/id/entier:x
    }
operande-> $ { ID }
        crÃ©er quadOP:11  str:x
liste_operandes-> operande 
        crÃ©er quadOP:12  cst:1
        crÃ©er quadOP:13  str:$
    done
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:14  cst:1
        crÃ©er quadOP:15  str:$
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:16  cst:0
M->empty
instruction-> UNTIL test_bloc DO liste_instructions DONE 
        crÃ©er quadOP:17  cst:12
        crÃ©er quadOP:18  cst:6
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:19  cst:0
    ;
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:20  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:x  EQUAL  op1: string:0  op2: NULL 
ligne 2:  res: addr:3  GOTO  op1: NULL  op2: NULL 
ligne 3:  res: id:__TEMP__1  IF ==  op1: id:x  op2: string:42 
ligne 4:  res: addr:12  IF _ GOTO  op1: id:__TEMP__1  op2: NULL 
ligne 5:  res: addr:6  GOTO  op1: NULL  op2: NULL 
ligne 6:  res: id:__TEMP__2  ADD  op1: id:x  op2: cst:7 
ligne 7:  res: id:x  EQUAL  op1: id:__TEMP__2  op2: NULL 
ligne 8:  res: addr:9  GOTO  op1: NULL  op2: NULL 
ligne 9:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: id:x 
ligne 10:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 11:  res: addr:3  GOTO  op1: NULL  op2: NULL 
ligne 12:  res: addr:13  GOTO  op1: NULL  op2: NULL 
ligne 13:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 14:  res: addr:15  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 EQUAL 
 GOTO 
 IF == 
 IF _ GOTO 
 GOTO 
 ADD 
 EQUAL 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 EXIT 
 GOTO 

Free Lglobal:


