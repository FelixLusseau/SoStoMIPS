    if
    test
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:0  str:17
    -le
operateur2-> -le
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:1  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:2  str:__TEMP__1
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    then
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[0;32mAdding str0 to table[0m
[91mUpdating type of str0 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:3  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:4  cst:1
        crÃ©er quadOP:5  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:6  cst:1
        crÃ©er quadOP:7  str:$
liste_instruction->instruction
        crÃ©er quadOP:8  cst:0
M->empty
    echo
    chaine:"no"
[0;32mAdding str1 to table[0m
[91mUpdating type of str1 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:9  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:10  cst:1
        crÃ©er quadOP:11  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:12  cst:1
        crÃ©er quadOP:13  str:$
liste_instruction->instruction
        crÃ©er quadOP:14  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:15  cst:4
        crÃ©er quadOP:16  cst:7
liste_instruction->instruction
        crÃ©er quadOP:17  cst:0
    ;
    if
    test
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:18  str:17
    -eq
operateur2-> -eq
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:19  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:20  str:__TEMP__2
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    then
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"no"
[0;32mAdding str2 to table[0m
[91mUpdating type of str2 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:21  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:22  cst:1
        crÃ©er quadOP:23  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:24  cst:1
        crÃ©er quadOP:25  str:$
liste_instruction->instruction
        crÃ©er quadOP:26  cst:0
M->empty
    echo
    chaine:"yes"
[0;32mAdding str3 to table[0m
[91mUpdating type of str3 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:27  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:28  cst:1
        crÃ©er quadOP:29  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:30  cst:1
        crÃ©er quadOP:31  str:$
liste_instruction->instruction
        crÃ©er quadOP:32  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:33  cst:14
        crÃ©er quadOP:34  cst:17
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:35  cst:0
    ;
    if
    test
    chaine:"17"
[0;32mAdding str4 to table[0m
[91mUpdating type of str4 to 3[0m
operande-> CHAINE:"17"
        crÃ©er quadOP:36  str:"17"
    ?
concatenation-> operande 
    =
    chaine:"42"
[0;32mAdding str5 to table[0m
[91mUpdating type of str5 to 3[0m
operande-> CHAINE:"42"
        crÃ©er quadOP:37  str:"42"
concatenation-> operande 
    then
test_instruction-> concatenation != concatenation 
        crÃ©er quadOP:38  str:__TEMP__3
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[0;32mAdding str6 to table[0m
[91mUpdating type of str6 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:39  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:40  cst:1
        crÃ©er quadOP:41  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:42  cst:1
        crÃ©er quadOP:43  str:$
liste_instruction->instruction
        crÃ©er quadOP:44  cst:0
M->empty
    echo
    chaine:"no"
[0;32mAdding str7 to table[0m
[91mUpdating type of str7 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:45  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:46  cst:1
        crÃ©er quadOP:47  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:48  cst:1
        crÃ©er quadOP:49  str:$
liste_instruction->instruction
        crÃ©er quadOP:50  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:51  cst:24
        crÃ©er quadOP:52  cst:27
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:53  cst:0
    ;
    if
    test
    -n
    chaine:"abc"
[0;32mAdding str8 to table[0m
[91mUpdating type of str8 to 3[0m
operande-> CHAINE:"abc"
        crÃ©er quadOP:54  str:"abc"
concatenation-> operande 
    then
test_instruction-> operateur1 concatenation 
        crÃ©er quadOP:55  str:__TEMP__4
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[0;32mAdding str9 to table[0m
[91mUpdating type of str9 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:56  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:57  cst:1
        crÃ©er quadOP:58  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:59  cst:1
        crÃ©er quadOP:60  str:$
liste_instruction->instruction
        crÃ©er quadOP:61  cst:0
M->empty
    echo
    chaine:"no"
[0;32mAdding str10 to table[0m
[91mUpdating type of str10 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:62  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:63  cst:1
        crÃ©er quadOP:64  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:65  cst:1
        crÃ©er quadOP:66  str:$
liste_instruction->instruction
        crÃ©er quadOP:67  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:68  cst:34
        crÃ©er quadOP:69  cst:37
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:70  cst:0
    ;
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:71  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:__TEMP__1  IF <=  op1: string:17  op2: string:42 
ligne 2:  res: addr:4  IF _ GOTO  op1: id:__TEMP__1  op2: NULL 
ligne 3:  res: addr:7  GOTO  op1: NULL  op2: NULL 
ligne 4:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 5:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 6:  res: addr:7  GOTO  op1: NULL  op2: NULL 
ligne 7:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 8:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 9:  res: addr:10  GOTO  op1: NULL  op2: NULL 
ligne 10:  res: addr:11  GOTO  op1: NULL  op2: NULL 
ligne 11:  res: id:__TEMP__2  IF ==  op1: string:17  op2: string:42 
ligne 12:  res: addr:14  IF _ GOTO  op1: id:__TEMP__2  op2: NULL 
ligne 13:  res: addr:17  GOTO  op1: NULL  op2: NULL 
ligne 14:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 15:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 16:  res: addr:17  GOTO  op1: NULL  op2: NULL 
ligne 17:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 18:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 19:  res: addr:20  GOTO  op1: NULL  op2: NULL 
ligne 20:  res: addr:21  GOTO  op1: NULL  op2: NULL 
ligne 21:  res: id:__TEMP__3  IF !=  op1: string:"17"  op2: string:"42" 
ligne 22:  res: addr:24  IF _ GOTO  op1: id:__TEMP__3  op2: NULL 
ligne 23:  res: addr:27  GOTO  op1: NULL  op2: NULL 
ligne 24:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 25:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 26:  res: addr:27  GOTO  op1: NULL  op2: NULL 
ligne 27:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 28:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 29:  res: addr:30  GOTO  op1: NULL  op2: NULL 
ligne 30:  res: addr:31  GOTO  op1: NULL  op2: NULL 
ligne 31:  res: id:__TEMP__4  IF NOT EMPTY op1: string:"abc"  op2: NULL 
ligne 32:  res: addr:34  IF _ GOTO  op1: id:__TEMP__4  op2: NULL 
ligne 33:  res: addr:37  GOTO  op1: NULL  op2: NULL 
ligne 34:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 35:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 36:  res: addr:37  GOTO  op1: NULL  op2: NULL 
ligne 37:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 38:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 39:  res: addr:40  GOTO  op1: NULL  op2: NULL 
ligne 40:  res: addr:41  GOTO  op1: NULL  op2: NULL 
ligne 41:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 42:  res: addr:43  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 IF <= 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 IF == 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 IF != 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 IF NOT EMPTY
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 EXIT 
 GOTO 

Free Lglobal:


