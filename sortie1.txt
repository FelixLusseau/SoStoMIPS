    declare
    mot/id/entier:abc
    [
    mot/id/entier:5
    ]
instruction-> DECLARE ID [ ENTIER ] 
ToInt: 5
        créer quadOP:0  str:abc
        créer quadOP:1  cst:5
liste_instruction->instruction
        créer quadOP:2  cst:0
    ;
    mot/id/entier:abc
    [
    mot/id/entier:1
operande_entier-> ENTIER 
ToInt: 1
        créer quadOP:3  cst:1
    ]
    =
    mot/id/entier:5
operande-> MOT
        créer quadOP:4  str:5
concatenation-> operande 
    ;
instruction-> ID [ operande_entier ] = concatenation
        créer quadOP:5  str:abc
liste_instruction->liste_instructions ; instruction
        créer quadOP:6  cst:0
    mot/id/entier:abc
    [
    mot/id/entier:2
operande_entier-> ENTIER 
ToInt: 2
        créer quadOP:7  cst:2
    ]
    =
    mot/id/entier:3
operande-> MOT
        créer quadOP:8  str:3
concatenation-> operande 
    ;
instruction-> ID [ operande_entier ] = concatenation
        créer quadOP:9  str:abc
liste_instruction->liste_instructions ; instruction
        créer quadOP:10  cst:0
    mot/id/entier:abc
    [
    mot/id/entier:3
operande_entier-> ENTIER 
ToInt: 3
        créer quadOP:11  cst:3
    ]
    =
    mot/id/entier:7
operande-> MOT
        créer quadOP:12  str:7
concatenation-> operande 
    ;
instruction-> ID [ operande_entier ] = concatenation
        créer quadOP:13  str:abc
liste_instruction->liste_instructions ; instruction
        créer quadOP:14  cst:0
    mot/id/entier:abc
    [
    mot/id/entier:4
operande_entier-> ENTIER 
ToInt: 4
        créer quadOP:15  cst:4
    ]
    =
    mot/id/entier:9
operande-> MOT
        créer quadOP:16  str:9
concatenation-> operande 
    ;
instruction-> ID [ operande_entier ] = concatenation
        créer quadOP:17  str:abc
liste_instruction->liste_instructions ; instruction
        créer quadOP:18  cst:0
    mot/id/entier:abc
    [
    mot/id/entier:5
operande_entier-> ENTIER 
ToInt: 5
        créer quadOP:19  cst:5
    ]
    =
    mot/id/entier:8
operande-> MOT
        créer quadOP:20  str:8
concatenation-> operande 
    ;
instruction-> ID [ operande_entier ] = concatenation
        créer quadOP:21  str:abc
liste_instruction->liste_instructions ; instruction
        créer quadOP:22  cst:0
    echo
    $
    {
    mot/id/entier:abc
    [
    *
    ]
    }
liste_operandes-> $ { ID [ * ] } 
        créer quadOP:23  str:$
        créer quadOP:24  str:abc
    ;
instruction-> MYECHO liste_operandes 
liste_instruction->liste_instructions ; instruction
        créer quadOP:25  cst:0
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        créer quadOP:26  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: tab:abc  TAB[]CREAT  op1: cst:5  op2: NULL 
ligne 2:  res: addr:3  GOTO  op1: NULL  op2: NULL 
ligne 3:  res: tab:abc  TAB[]EQUAL  op1: cst:1  op2: string:5 
ligne 4:  res: addr:5  GOTO  op1: NULL  op2: NULL 
ligne 5:  res: tab:abc  TAB[]EQUAL  op1: cst:2  op2: string:3 
ligne 6:  res: addr:7  GOTO  op1: NULL  op2: NULL 
ligne 7:  res: tab:abc  TAB[]EQUAL  op1: cst:3  op2: string:7 
ligne 8:  res: addr:9  GOTO  op1: NULL  op2: NULL 
ligne 9:  res: tab:abc  TAB[]EQUAL  op1: cst:4  op2: string:9 
ligne 10:  res: addr:11  GOTO  op1: NULL  op2: NULL 
ligne 11:  res: tab:abc  TAB[]EQUAL  op1: cst:5  op2: string:8 
ligne 12:  res: addr:13  GOTO  op1: NULL  op2: NULL 
ligne 13:  res: tab:$  EQUAL  op1: tab:abc  op2: NULL 
ligne 14:  res: addr:15  GOTO  op1: NULL  op2: NULL 
ligne 15:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 16:  res: addr:17  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 TAB[]CREAT 
 GOTO 
 TAB[]EQUAL 
 GOTO 
 TAB[]EQUAL 
 GOTO 
 TAB[]EQUAL 
 GOTO 
 TAB[]EQUAL 
 GOTO 
 TAB[]EQUAL 
 GOTO 
 EQUAL 
 GOTO 
 EXIT 
 GOTO 

### Table of symbols : ###

n°66423 : ID			Type : undefined	abc

Free Lglobal:


