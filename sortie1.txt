    mot/id/entier:s
    =
[0;32mAdding s to table[0m
    chaine:"def"
[91mUpdating type of s to 3[0m
operande-> CHAINE:"def"
        crÃ©er quadOP:0  str:"def"
concatenation-> operande 
    ;
instruction-> ID = concatenation
[91mUpdating type of s to 3[0m
        crÃ©er quadOP:1  str:s
liste_instruction->instruction
        crÃ©er quadOP:2  cst:0
    case
    $
    {
    mot/id/entier:s
    }
operande-> $ { ID }
        crÃ©er quadOP:3  str:s
    in
    chaine:"abc"
filtre->CHAINE
[0;32mAdding str0 to table[0m
[91mUpdating type of str0 to 3[0m
        crÃ©er quadOP:4  str:"abc"
        crÃ©er quadOP:5  str:__TEMP__1
    )
M->empty
    echo
    chaine:"no abc"
[0;32mAdding str1 to table[0m
[91mUpdating type of str1 to 3[0m
operande-> CHAINE:"no abc"
        crÃ©er quadOP:6  str:"no abc"
liste_operandes-> operande 
        crÃ©er quadOP:7  cst:1
        crÃ©er quadOP:8  str:$
    ;
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:9  cst:1
        crÃ©er quadOP:10  str:$
liste_instruction->instruction
        crÃ©er quadOP:11  cst:0
    ;
liste_cas->filtre ) liste_instructions ; ; 
        crÃ©er quadOP:12  cst:6
        crÃ©er quadOP:13  cst:9
    chaine:"def"
filtre->CHAINE
[0;32mAdding str2 to table[0m
[91mUpdating type of str2 to 3[0m
        crÃ©er quadOP:14  str:"def"
        crÃ©er quadOP:15  str:__TEMP__2
    )
M->empty
    echo
    chaine:"yes"
[0;32mAdding str3 to table[0m
[91mUpdating type of str3 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:16  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:17  cst:1
        crÃ©er quadOP:18  str:$
    ;
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:19  cst:1
        crÃ©er quadOP:20  str:$
liste_instruction->instruction
        crÃ©er quadOP:21  cst:0
    ;
liste_cas->liste_cas filtre ) liste_instructions ; ; 
        crÃ©er quadOP:22  cst:12
        crÃ©er quadOP:23  cst:15
    chaine:"ghij"
filtre->CHAINE
[0;32mAdding str4 to table[0m
[91mUpdating type of str4 to 3[0m
        crÃ©er quadOP:24  str:"ghij"
        crÃ©er quadOP:25  str:__TEMP__3
    )
M->empty
    echo
    chaine:"no ghij"
[0;32mAdding str5 to table[0m
[91mUpdating type of str5 to 3[0m
operande-> CHAINE:"no ghij"
        crÃ©er quadOP:26  str:"no ghij"
liste_operandes-> operande 
        crÃ©er quadOP:27  cst:1
        crÃ©er quadOP:28  str:$
    ;
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:29  cst:1
        crÃ©er quadOP:30  str:$
liste_instruction->instruction
        crÃ©er quadOP:31  cst:0
    ;
liste_cas->liste_cas filtre ) liste_instructions ; ; 
        crÃ©er quadOP:32  cst:18
        crÃ©er quadOP:33  cst:21
    *
filtre-> *
    )
M->empty
    echo
    chaine:"no *"
[0;32mAdding str6 to table[0m
[91mUpdating type of str6 to 3[0m
operande-> CHAINE:"no *"
        crÃ©er quadOP:34  str:"no *"
liste_operandes-> operande 
        crÃ©er quadOP:35  cst:1
        crÃ©er quadOP:36  str:$
    ;
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:37  cst:1
        crÃ©er quadOP:38  str:$
liste_instruction->instruction
        crÃ©er quadOP:39  cst:0
    ;
liste_cas->liste_cas filtre ) liste_instructions ; ; 
    esac
instruction-> CASE operande IN liste_cas ESAC 
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:40  cst:0
    ;
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:41  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:s  EQUAL  op1: string:"def"  op2: NULL 
ligne 2:  res: addr:3  GOTO  op1: NULL  op2: NULL 
ligne 3:  res: id:__TEMP__1  IF ==  op1: id:s  op2: string:"abc" 
ligne 4:  res: addr:6  IF _ GOTO  op1: id:__TEMP__1  op2: NULL 
ligne 5:  res: addr:9  GOTO  op1: NULL  op2: NULL 
ligne 6:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no abc" 
ligne 7:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 8:  res: addr:9  GOTO  op1: NULL  op2: NULL 
ligne 9:  res: id:__TEMP__2  IF ==  op1: id:s  op2: string:"def" 
ligne 10:  res: addr:12  IF _ GOTO  op1: id:__TEMP__2  op2: NULL 
ligne 11:  res: addr:15  GOTO  op1: NULL  op2: NULL 
ligne 12:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 13:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 14:  res: addr:15  GOTO  op1: NULL  op2: NULL 
ligne 15:  res: id:__TEMP__3  IF ==  op1: id:s  op2: string:"ghij" 
ligne 16:  res: addr:18  IF _ GOTO  op1: id:__TEMP__3  op2: NULL 
ligne 17:  res: addr:21  GOTO  op1: NULL  op2: NULL 
ligne 18:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no ghij" 
ligne 19:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 20:  res: addr:21  GOTO  op1: NULL  op2: NULL 
ligne 21:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no *" 
ligne 22:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 23:  res: addr:24  GOTO  op1: NULL  op2: NULL 
ligne 24:  res: addr:25  GOTO  op1: NULL  op2: NULL 
ligne 25:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 26:  res: addr:27  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 EQUAL 
 GOTO 
 IF == 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 IF == 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 IF == 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 EXIT 
 GOTO 

Free Lglobal:


