    if
    test
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:0  str:17
    -gt
operateur2-> -gt
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:1  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:2  str:__TEMP__1
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    -o
test_expr-> test_expr2 
M->empty
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:3  str:17
    -le
operateur2-> -le
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:4  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:5  str:__TEMP__2
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    then
test_expr-> test_expr O test_expr2 
        crÃ©er quadOP:6  cst:4
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[91mUpdating type of str0 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:7  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:8  cst:1
        crÃ©er quadOP:9  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:10  cst:1
        crÃ©er quadOP:11  str:$
liste_instruction->instruction
        crÃ©er quadOP:12  cst:0
M->empty
    echo
    chaine:"no"
[91mUpdating type of str1 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:13  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:14  cst:1
        crÃ©er quadOP:15  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:16  cst:1
        crÃ©er quadOP:17  str:$
liste_instruction->instruction
        crÃ©er quadOP:18  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:19  cst:7
        crÃ©er quadOP:20  cst:7
        crÃ©er quadOP:21  cst:10
liste_instruction->instruction
        crÃ©er quadOP:22  cst:0
    ;
    if
    test
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:23  str:17
    -lt
operateur2-> -lt
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:24  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:25  str:__TEMP__3
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    -a
M->empty
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:26  str:42
    -ge
operateur2-> -ge
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:27  str:17
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:28  str:__TEMP__4
test_expr3 -> test_instruction 
test_expr2-> test_expr2 A test_expr3 
        crÃ©er quadOP:29  cst:17
    then
test_expr-> test_expr2 
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[91mUpdating type of str2 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:30  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:31  cst:1
        crÃ©er quadOP:32  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:33  cst:1
        crÃ©er quadOP:34  str:$
liste_instruction->instruction
        crÃ©er quadOP:35  cst:0
M->empty
    echo
    chaine:"no"
[91mUpdating type of str3 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:36  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:37  cst:1
        crÃ©er quadOP:38  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:39  cst:1
        crÃ©er quadOP:40  str:$
liste_instruction->instruction
        crÃ©er quadOP:41  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:42  cst:20
        crÃ©er quadOP:43  cst:23
        crÃ©er quadOP:44  cst:23
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:45  cst:0
    ;
    if
    test
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:46  str:17
    -ge
operateur2-> -ge
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:47  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:48  str:__TEMP__5
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    -o
test_expr-> test_expr2 
M->empty
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:49  str:17
    -le
operateur2-> -le
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:50  str:42
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:51  str:__TEMP__6
test_expr3 -> test_instruction 
test_expr2-> test_expr3 
2
3
    -a
M->empty
    mot/id/entier:42
operande-> MOT
        crÃ©er quadOP:52  str:42
    -ge
operateur2-> -ge
    mot/id/entier:17
operande-> MOT
        crÃ©er quadOP:53  str:17
test_instruction-> operande operateur2 operande 
        crÃ©er quadOP:54  str:__TEMP__7
test_expr3 -> test_instruction 
test_expr2-> test_expr2 A test_expr3 
        crÃ©er quadOP:55  cst:33
    then
test_expr-> test_expr O test_expr2 
        crÃ©er quadOP:56  cst:30
test_bloc-> TEST test_expr 
M->empty
    echo
    chaine:"yes"
[91mUpdating type of str4 to 3[0m
operande-> CHAINE:"yes"
        crÃ©er quadOP:57  str:"yes"
liste_operandes-> operande 
        crÃ©er quadOP:58  cst:1
        crÃ©er quadOP:59  str:$
    else
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:60  cst:1
        crÃ©er quadOP:61  str:$
liste_instruction->instruction
        crÃ©er quadOP:62  cst:0
M->empty
    echo
    chaine:"no"
[91mUpdating type of str5 to 3[0m
operande-> CHAINE:"no"
        crÃ©er quadOP:63  str:"no"
liste_operandes-> operande 
        crÃ©er quadOP:64  cst:1
        crÃ©er quadOP:65  str:$
    fi
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:66  cst:1
        crÃ©er quadOP:67  str:$
liste_instruction->instruction
        crÃ©er quadOP:68  cst:0
else_part->ELSE liste_instructions
instruction-> IF test_bloc THEN liste_instructions else_part FI 
        crÃ©er quadOP:69  cst:36
        crÃ©er quadOP:70  cst:36
        crÃ©er quadOP:71  cst:39
        crÃ©er quadOP:72  cst:39
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:73  cst:0
    ;
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:74  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:__TEMP__1  IF >  op1: string:17  op2: string:42 
ligne 2:  res: addr:7  IF _ GOTO  op1: id:__TEMP__1  op2: NULL 
ligne 3:  res: addr:4  GOTO  op1: NULL  op2: NULL 
ligne 4:  res: id:__TEMP__2  IF <=  op1: string:17  op2: string:42 
ligne 5:  res: addr:7  IF _ GOTO  op1: id:__TEMP__2  op2: NULL 
ligne 6:  res: addr:10  GOTO  op1: NULL  op2: NULL 
ligne 7:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 8:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 9:  res: addr:10  GOTO  op1: NULL  op2: NULL 
ligne 10:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 11:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 12:  res: addr:13  GOTO  op1: NULL  op2: NULL 
ligne 13:  res: addr:14  GOTO  op1: NULL  op2: NULL 
ligne 14:  res: id:__TEMP__3  IF <  op1: string:17  op2: string:42 
ligne 15:  res: addr:17  IF _ GOTO  op1: id:__TEMP__3  op2: NULL 
ligne 16:  res: addr:23  GOTO  op1: NULL  op2: NULL 
ligne 17:  res: id:__TEMP__4  IF >=  op1: string:42  op2: string:17 
ligne 18:  res: addr:20  IF _ GOTO  op1: id:__TEMP__4  op2: NULL 
ligne 19:  res: addr:23  GOTO  op1: NULL  op2: NULL 
ligne 20:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 21:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 22:  res: addr:23  GOTO  op1: NULL  op2: NULL 
ligne 23:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 24:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 25:  res: addr:26  GOTO  op1: NULL  op2: NULL 
ligne 26:  res: addr:27  GOTO  op1: NULL  op2: NULL 
ligne 27:  res: id:__TEMP__5  IF >=  op1: string:17  op2: string:42 
ligne 28:  res: addr:36  IF _ GOTO  op1: id:__TEMP__5  op2: NULL 
ligne 29:  res: addr:30  GOTO  op1: NULL  op2: NULL 
ligne 30:  res: id:__TEMP__6  IF <=  op1: string:17  op2: string:42 
ligne 31:  res: addr:33  IF _ GOTO  op1: id:__TEMP__6  op2: NULL 
ligne 32:  res: addr:39  GOTO  op1: NULL  op2: NULL 
ligne 33:  res: id:__TEMP__7  IF >=  op1: string:42  op2: string:17 
ligne 34:  res: addr:36  IF _ GOTO  op1: id:__TEMP__7  op2: NULL 
ligne 35:  res: addr:39  GOTO  op1: NULL  op2: NULL 
ligne 36:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"yes" 
ligne 37:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 38:  res: addr:39  GOTO  op1: NULL  op2: NULL 
ligne 39:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:"no" 
ligne 40:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 41:  res: addr:42  GOTO  op1: NULL  op2: NULL 
ligne 42:  res: addr:43  GOTO  op1: NULL  op2: NULL 
ligne 43:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 44:  res: addr:45  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 IF > 
 IF _ GOTO 
 GOTO 
 IF <= 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 IF < 
 IF _ GOTO 
 GOTO 
 IF >= 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 IF >= 
 IF _ GOTO 
 GOTO 
 IF <= 
 IF _ GOTO 
 GOTO 
 IF >= 
 IF _ GOTO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 TAB[]EQUAL 
 ECHO 
 GOTO 
 GOTO 
 EXIT 
 GOTO 

Free Lglobal:


