    mot/id/entier:x
    =
    $
    (
    expr
    mot/id/entier:1
operande_entier-> ENTIER 
ToInt: 1
        crÃ©er quadOP:0  cst:1
produit_entier-> operande_entier 
    +
somme_entiere-> produit_entier 
    mot/id/entier:2
operande_entier-> ENTIER 
ToInt: 2
        crÃ©er quadOP:1  cst:2
produit_entier-> operande_entier 
    -
somme_entiere-> somme_entiere plus_ou_moin produit_entier 
        crÃ©er quadOP:2  str:__TEMP__1
    mot/id/entier:3
operande_entier-> ENTIER 
ToInt: 3
        crÃ©er quadOP:3  cst:3
produit_entier-> operande_entier 
    *
    mot/id/entier:4
operande_entier-> ENTIER 
ToInt: 4
        crÃ©er quadOP:4  cst:4
produit_entier-> produit_entier fois_div_mod operande_entier
        crÃ©er quadOP:5  str:__TEMP__2
    /
    mot/id/entier:6
operande_entier-> ENTIER 
ToInt: 6
        crÃ©er quadOP:6  cst:6
produit_entier-> produit_entier fois_div_mod operande_entier
        crÃ©er quadOP:7  str:__TEMP__3
    %
    mot/id/entier:5
operande_entier-> ENTIER 
ToInt: 5
        crÃ©er quadOP:8  cst:5
produit_entier-> produit_entier fois_div_mod operande_entier
        crÃ©er quadOP:9  str:__TEMP__4
    )
somme_entiere-> somme_entiere plus_ou_moin produit_entier 
        crÃ©er quadOP:10  str:__TEMP__5
operande-> $ ( EXPR somme_entiere )
concatenation-> operande 
    ;
instruction-> ID = concatenation
[91mUpdating type of x to 1[0m
        crÃ©er quadOP:11  str:x
liste_instruction->instruction
        crÃ©er quadOP:12  cst:0
    echo
    $
    {
    mot/id/entier:x
    }
operande-> $ { ID }
        crÃ©er quadOP:13  str:x
liste_operandes-> operande 
        crÃ©er quadOP:14  cst:1
        crÃ©er quadOP:15  str:$
    chaine:"=1"
operande-> CHAINE:"=1"
        crÃ©er quadOP:16  str:"=1"
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:17  cst:2
        crÃ©er quadOP:18  str:$
    ;
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:19  cst:1
        crÃ©er quadOP:20  str:$
        crÃ©er quadOP:21  cst:2
        crÃ©er quadOP:22  str:$
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:23  cst:0
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:24  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:__TEMP__1  ADD  op1: cst:1  op2: cst:2 
ligne 2:  res: id:__TEMP__2  MUL  op1: cst:3  op2: cst:4 
ligne 3:  res: id:__TEMP__3  DIV  op1: id:__TEMP__2  op2: cst:6 
ligne 4:  res: id:__TEMP__4  MOD  op1: id:__TEMP__3  op2: cst:5 
ligne 5:  res: id:__TEMP__5  LESS  op1: id:__TEMP__1  op2: id:__TEMP__4 
ligne 6:  res: id:x  EQUAL  op1: id:__TEMP__5  op2: NULL 
ligne 7:  res: addr:8  GOTO  op1: NULL  op2: NULL 
ligne 8:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: id:x 
ligne 9:  res: tab:$  TAB[]EQUAL  op1: cst:2  op2: string:"=1" 
ligne 10:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 11:  res: tab:$  ECHO  op1: cst:2  op2: NULL 
ligne 12:  res: addr:13  GOTO  op1: NULL  op2: NULL 
ligne 13:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 14:  res: addr:15  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 ADD 
 MUL 
 DIV 
 MOD 
 LESS 
 EQUAL 
 GOTO 
 TAB[]EQUAL 
 TAB[]EQUAL 
 ECHO 
 ECHO 
 GOTO 
 EXIT 
 GOTO 

Free Lglobal:


