    mot/id/entier:i
    =
    mot/id/entier:2
operande-> MOT
        crÃ©er quadOP:0  str:2
concatenation-> operande 
    ;
instruction-> ID = concatenation
[91mUpdating type of i to 1[0m
        crÃ©er quadOP:1  str:i
liste_instruction->instruction
        crÃ©er quadOP:2  cst:0
    for
    mot/id/entier:k
    in
    mot/id/entier:0
operande-> MOT
        crÃ©er quadOP:3  str:0
liste_operandes-> operande 
        crÃ©er quadOP:4  cst:1
        crÃ©er quadOP:5  str:$
    mot/id/entier:1
operande-> MOT
        crÃ©er quadOP:6  str:1
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:7  cst:2
        crÃ©er quadOP:8  str:$
    mot/id/entier:2
operande-> MOT
        crÃ©er quadOP:9  str:2
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:10  cst:3
        crÃ©er quadOP:11  str:$
    mot/id/entier:3
operande-> MOT
        crÃ©er quadOP:12  str:3
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:13  cst:4
        crÃ©er quadOP:14  str:$
    mot/id/entier:4
operande-> MOT
        crÃ©er quadOP:15  str:4
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:16  cst:5
        crÃ©er quadOP:17  str:$
    mot/id/entier:5
operande-> MOT
        crÃ©er quadOP:18  str:5
liste_operandes-> liste_operandes operande 
        crÃ©er quadOP:19  cst:6
        crÃ©er quadOP:20  str:$
    do
        crÃ©er quadOP:21  str:__TEMP__1
        crÃ©er quadOP:22  cst:0
        crÃ©er quadOP:23  cst:1
        crÃ©er quadOP:24  str:__TEMP__2
        crÃ©er quadOP:25  str:$
    echo
    $
    {
    mot/id/entier:i
    }
operande-> $ { ID }
        crÃ©er quadOP:26  str:i
liste_operandes-> operande 
        crÃ©er quadOP:27  cst:1
        crÃ©er quadOP:28  str:$
    done
instruction-> MYECHO liste_operandes 
        crÃ©er quadOP:29  cst:1
        crÃ©er quadOP:30  str:$
liste_instruction->instruction
        crÃ©er quadOP:31  cst:0
instruction-> FOR ID IN liste_operandes DO liste_instructions DONE  
        crÃ©er quadOP:32  cst:6
        crÃ©er quadOP:33  cst:17
        crÃ©er quadOP:34  str:k
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:35  cst:0
    ;
    exit
instruction->EXIT
liste_instruction->liste_instructions ; instruction
        crÃ©er quadOP:36  cst:0
programme->liste_instruction

Affichage Lglobal:
ligne 1:  res: id:i  EQUAL  op1: string:2  op2: NULL 
ligne 2:  res: addr:3  GOTO  op1: NULL  op2: NULL 
ligne 3:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: string:0 
ligne 4:  res: tab:$  TAB[]EQUAL  op1: cst:2  op2: string:1 
ligne 5:  res: tab:$  TAB[]EQUAL  op1: cst:3  op2: string:2 
ligne 6:  res: tab:$  TAB[]EQUAL  op1: cst:4  op2: string:3 
ligne 7:  res: tab:$  TAB[]EQUAL  op1: cst:5  op2: string:4 
ligne 8:  res: tab:$  TAB[]EQUAL  op1: cst:6  op2: string:5 
ligne 9:  res: id:__TEMP__1  EQUAL  op1: cst:0  op2: NULL 
ligne 10:  res: id:__TEMP__1  ADD  op1: id:__TEMP__1  op2: cst:1 
ligne 11:  res: id:__TEMP__2  IF >  op1: id:__TEMP__1  op2: cst:6 
ligne 12:  res: addr:17  IF _ GOTO  op1: id:__TEMP__2  op2: NULL 
ligne 13:  res: id:k  TAB[]GIVE  op1: tab:$  op2: id:__TEMP__1 
ligne 14:  res: tab:$  TAB[]EQUAL  op1: cst:1  op2: id:i 
ligne 15:  res: tab:$  ECHO  op1: cst:1  op2: NULL 
ligne 16:  res: addr:10  GOTO  op1: NULL  op2: NULL 
ligne 17:  res: addr:18  GOTO  op1: NULL  op2: NULL 
ligne 18:  res: NULL  EXIT  op1: NULL  op2: NULL 
ligne 19:  res: addr:20  GOTO  op1: NULL  op2: NULL 
Yacc return : ->0

### MIPS: ###

 EQUAL 
 GOTO 
 TAB[]EQUAL 
 TAB[]EQUAL 
 TAB[]EQUAL 
 TAB[]EQUAL 
 TAB[]EQUAL 
 TAB[]EQUAL 
 EQUAL 
 ADD 
 IF > 